# -*- coding: utf-8 -*-
"""Cópia de Lista 4 -  Detecção com YOLO v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VsmdhzZocwuVP3aAnEXMn72nawh_rPn9

#Projeto de detecção de objeto com Python e Yolo-V4 
Para este projeto foram captadas placas de veiculos automotores e realizado o aprendizado de maquina profundo com darknet, OpenCV e Yolo-V4
"""



"""## Preparando o Ambiente para o Projeto"""

# Importando as Bibliotecas Necessárias para o projeto
import warnings
warnings.filterwarnings("ignore")

import cv2

# Verificação da GPU
import tensorflow as tf
device_name = tf.test.gpu_device_name()
print(device_name)

# Montando o Drive para acesso aos arquivos
from google.colab import drive
drive.mount('/content/gdrive')

"""Caso tenha dificuldade de conexão basta seguir o tutorial
 
https://www.marktechpost.com/2019/06/07/how-to-connect-google-colab-with-google-drive/

## Gerando o arquivo train.txt e test.txt
"""

# Demonstra o local atual
!pwd

# Entra na pasta do drive onde os arquivos Train e teste devem ser gerados
!cd gdrive/MyDrive/Yolov4/recursos

# Executa o codigo para gerar o train.txt
!python /content/gdrive/MyDrive/Yolov4/recursos/gerar_train.py

# Executa o codigo para gerar o train.txt
!python /content/gdrive/MyDrive/Yolov4/recursos/gerar_test.py

# Volta para o diretorio raiz do colab
#cd ../../../..
!cd gdrive/
!pwd

"""## Importação e Compilação do Darknet"""

# Fazendo o Download do Darknet
!git clone https://github.com/AlexeyAB/darknet

# Commented out IPython magic to ensure Python compatibility.
# Entrando na Pasta do Darknet
# %cd darknet

# Compilando o Darknet
!make

"""## Mudando a configuração para GPU"""

!sed -i 's/OPENCV=0/OPENCV=1/' Makefile
!sed -i 's/GPU=0/GPU=1/' Makefile
!sed -i 's/CUDNN=0/CUDNN=1/' Makefile

!make

"""## Enviando o dataset para o Darknet """

# Criando um atalho para a pasta de recursos
!ln -s /content/gdrive/MyDrive/Yolov4 /yolov4

ls /yolov4/

# Mostra o diretório atual
!pwd

# Copiando os arquivos de treino para o Darknet
!cp /yolov4/recursos/data/train -r ./data/

# Copiando os arquivos de treino para o Darknet
!cp /yolov4/recursos/data/test -r ./data/

!cp /yolov4/recursos/yolov4_custom.cfg ./cfg
!cp /yolov4/recursos/obj.names ./data
!cp /yolov4/recursos/obj.data ./data
!cp /yolov4/recursos/data/train.txt ./data
!cp /yolov4/recursos/data/test.txt ./data

"""## Baixando os pesos pré-treinados das camadas convolucionais"""

# Transferencia de Aprendizagem
!wget https://github.com/AlexeyAB/darknet/releases/download/darknet_yolo_v3_optimal/yolov4.conv.137

"""## Realizando o treinamento do modelo"""

# Realiza o primeiro treinamento, se que novos arquivos forem inseridos na base de treino (Atualmente 132 imagens)
!./darknet detector train data/obj.data cfg/yolov4_custom.cfg yolov4.conv.137 -dont_show -map

# Continuando Treinamento (Não é necessario executar se estiver no primeiro treino)
!./darknet detector train data/obj.data cfg/yolov4_custom.cfg /yolov4/recursos/yolov4_custom_last.weights -dont_show -map

"""### Exibindo o resultado"""

import cv2 as cv
print(cv.__version__)
!pip install opencv-python==4.4.0.40

import matplotlib.pyplot as plt
import cv2 as cv
print(cv.__version__)

# Função para mostrar as imagens
def mostrar(caminho):
  img = cv.imread(caminho)
  fig = plt.gcf()
  fig.set_size_inches(18, 10)
  plt.axis("off")
  plt.imshow(cv.cvtColor(img, cv.COLOR_BGR2RGB))
  plt.show()

mostrar('chart.png')

"""### Verificando o mAP (Mean Average Precision) do modelo"""

# Comando para verificar o mAP
!./darknet detector map data/obj.data cfg/yolov4_custom.cfg /yolov4/recursos/yolov4_custom_last.weights

"""## Testando o modelo treinado"""

# Comando para testar o modelo
!./darknet detector test data/obj.data cfg/yolov4_custom.cfg /yolov4/recursos/yolov4_custom_last.weights /yolov4/recursos/data/test/teste3.jpg -thresh 0.5

mostrar('predictions.jpg')

"""Link para ferramentas uteis

https://colab.research.google.com/drive/1JQNpeo8SvEizoq8TKoeBA-uD11W2rT4T#scrollTo=LvnyfbUBjyOd&uniqifier=1
"""